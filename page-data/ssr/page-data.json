{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/ssr",
    "result": {"data":{"markdownRemark":{"html":"<p>Performance is a central concern for front end developers. We should always be striving to serve the leanest web apps that perform faster than humans can think. This is as much a game of psychology as it is a a technological challenge. It's a challenge of loading the correct content first so a user can see a site and begin to make a decision of what they want to do (scroll down, click a button, log in, etc.) and then be prepared for that action before they make that decision.</p>\n<p>Enter server-side rendering. This is a technique where you run React on your Node.js server <em>before</em> you serve the request to the user and send down the first rendering of your website already done. This saves precious milliseconds+ on your site because otherwise the user has to download the HTML, then download the JavaScript, then execute the JS to get the app. In this case, they'll just download the HTML and see the first rendered page while React is loading in the background.</p>\n<p>While the total time to when the page is actually interactive is comparable, if a bit slower, the time to when the user <em>sees</em> something for the first time should be much faster, hence why this is a popular technique. So let's give it a shot.</p>\n<p>First, we need to remove all references to <code class=\"language-text\">window</code> or anything browser related from a path that <em>could</em> be called in Node. That means whenever we reference <code class=\"language-text\">window</code>, it'll have to be inside componentDidMount since componentDidMount doesn't get called in Node.</p>\n<p>We'll also have change where our app gets rendered. Make a new file called ClientApp.js. Put in there:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">hydrate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This code will only get run in the browser, so any sort of browser related stuff can safely be done here (like analytics.) We're also using <code class=\"language-text\">React.hydrate</code> instead of <code class=\"language-text\">React.render</code> because this will hydrate existing markup with React magic âœ¨ rather than render it from scratch.</p>\n<p>Because ClientApp.js will now be the entry point to the app, not App.js, we'll need to fix that in the script tag in index.html. Change it from App.js to ClientApp.js</p>\n<p>Let's go fix App.js now:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// remove react-dom import</span>\n\n<span class=\"token comment\">// replace render at bottom</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The Modal makes reference to window in its modular scope, let's move that reference inside the render function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// replace modalRoot assignment</span>\n<span class=\"token keyword\">let</span> modalRoot<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// in function</span>\nmodalRoot <span class=\"token operator\">=</span> modalRoot <span class=\"token operator\">?</span> modalRoot <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now Modal doesn't reference window in the modular scope but it <em>does</em> in the render function. This means you can't render a modal on initial page load. Since it's using the DOM to attach the portal, that sort of makes sense. Be careful of that. We're using a ternary to only look it up on the first render.</p>\n<p>We need a few more modules. Run <code class=\"language-text\">npm install babel-cli express</code> to get the tools we need for Node.</p>\n<p>Now in your package.json, add the following to your <code class=\"language-text\">\"scripts\"</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parcel build --public-url ./dist/ src/index.html\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm -s run build &amp;&amp; babel-node server/index.js\"</span></code></pre></div>\n<p>This will allow us to build the app into static (pre-compiled, non-dev) assets and then start our server. babel-node will run Babel on our Node code so we can use our App JSX components without pre-compiling them. This works for dev but babel-cli isn't meant for prod. When you go to deploy your app, run Babel on your code to pre-compile it and then run the compiled JS.</p>\n<p>Let's finally go write our Node.js server:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/server\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ServerLocation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reach/router\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/App\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dist/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not rendered\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dist\"</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> reactMarkup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ServerLocation url<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ServerLocation<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>reactMarkup<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">listening on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"http://expressjs.com/\">Express.js</a> is a Node.js web server framework. It's the most common one and a simple one to learn.</li>\n<li>We'll be listening on port 3000 (<a href=\"http://locahost:**3000\">http://locahost:**3000</a>**) unless a environment variable is passed in saying otherwise. We do this because if you try to deploy this, you'll need to watch for PORT.</li>\n<li>We'll statically serve what Parcel built.</li>\n<li>Anything that Parcel <em>doesn't</em> serve, will be given our index.html. This lets the client-side app handle all the routing.</li>\n<li>We read the compiled HTML doc and split it around our <code class=\"language-text\">not rendered</code> statement. Then we can slot in our markup in between the divs, right where it should be.</li>\n<li>We use renderToString to take our app and render it to a string we can serve as HTML, sandwiched inside our outer HTML.</li>\n</ul>\n<p>Run <code class=\"language-text\">npm run start</code> and then open <a href=\"http://localhost:3000\">http://localhost:3000</a> to see your server side rendered app. Notice it displays markup almost instantly.</p>\n<h2 id=\"-commit-3ecc99609105ae3052af0af8defbf803934427ed-branch-ssr\" style=\"position:relative;\"><a href=\"#-commit-3ecc99609105ae3052af0af8defbf803934427ed-branch-ssr\" aria-label=\" commit 3ecc99609105ae3052af0af8defbf803934427ed branch ssr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ðŸŒ³ commit 3ecc99609105ae3052af0af8defbf803934427ed branch <a href=\"https://github.com/btholt/complete-intro-to-react-v5/commit/3ecc99609105ae3052af0af8defbf803934427ed\">ssr</a></h2>\n<p>This is all cool, but we can make it <em>better</em>.</p>\n<p>With HTTP requests, you can actually send responses in chunks. This is called <em>streaming</em> your request. When you stream a request, you send partially rendered bits to your client so that the browser can immediately start processing the HTML rather than getting one big payload at the end. Really, the biggest win is that browser can immediately start downloading CSS while you're still rendering your app.</p>\n<p>Let's see how to do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// change react-dom import</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToNodeStream <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/server\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// replace app.use call</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> reactMarkup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ServerLocation url<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ServerLocation<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token function\">renderToNodeStream</span><span class=\"token punctuation\">(</span>reactMarkup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    res<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">end</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  stream<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Node has a native type called a stream. A stream, similar to a bash stream, is a stream of data that can be piped into something else. In this case, we have a Node stream of React markup being rendered. As each thing is rendered, React fires off a chunk that then can be sent to the user more quickly.</li>\n<li>First thing we do is <em>immediately</em> write the head to the user. This way they can grab the <code class=\"language-text\">&lt;head></code> which the CSS <code class=\"language-text\">&lt;link></code> tag in it, meaning they can start the CSS download ASAP.</li>\n<li>From there we start streaming the React markup to the user.</li>\n<li>After we finish with that stream, we write the end of the index.html page and close the connection.</li>\n</ul>\n<h2 id=\"-commit-2cc3fbda0c316366e93b026d7295b3f190c867c5-branch-ssr\" style=\"position:relative;\"><a href=\"#-commit-2cc3fbda0c316366e93b026d7295b3f190c867c5-branch-ssr\" aria-label=\" commit 2cc3fbda0c316366e93b026d7295b3f190c867c5 branch ssr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ðŸŒ³ commit 2cc3fbda0c316366e93b026d7295b3f190c867c5 branch <a href=\"https://github.com/btholt/complete-intro-to-react-v5/tree/ssr\">ssr</a></h2>","frontmatter":{"path":"/ssr","title":"Server Side Rendering","order":20}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":3,"path":"/eslint-prettier","title":"npm, ESLint & Prettier"}}},{"node":{"frontmatter":{"order":4,"path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":5,"path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":6,"path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":7,"path":"/effects","title":"Effects"}}},{"node":{"frontmatter":{"order":8,"path":"/dev-tools","title":"Dev Tools"}}},{"node":{"frontmatter":{"order":9,"path":"/async","title":"Handling Async"}}},{"node":{"frontmatter":{"order":10,"path":"/reach-router","title":"Reach Router"}}},{"node":{"frontmatter":{"order":11,"path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":12,"path":"/error-boundaries","title":"Error Boundaries"}}},{"node":{"frontmatter":{"order":13,"path":"/context","title":"Context"}}},{"node":{"frontmatter":{"order":14,"path":"/portals-and-refs","title":"Portals and Refs"}}},{"node":{"frontmatter":{"order":15,"path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":16,"path":"/hooks-in-depth","title":"Hooks in Depth"}}},{"node":{"frontmatter":{"order":17,"path":"/emotion","title":"Emotion"}}},{"node":{"frontmatter":{"order":19,"path":"/code-splitting","title":"Code Splitting"}}},{"node":{"frontmatter":{"order":19,"path":"/typescript","title":"TypeScript"}}},{"node":{"frontmatter":{"order":20,"path":"/ssr","title":"Server Side Rendering"}}},{"node":{"frontmatter":{"order":21,"path":"/redux","title":"Redux"}}},{"node":{"frontmatter":{"order":22,"path":"/testing","title":"Testing"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["831804104"]}