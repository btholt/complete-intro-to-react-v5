{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/async",
    "result": {"data":{"markdownRemark":{"html":"<p>We've seen one way to handle async code in React: with effects. This is most useful when you need to be reactive to your data changing or when you're setting up or tearing down a component. Sometimes you just need to respond to someone pressing a button. This isn't hard to accomplish either. Let's make it so whenever someone either hits enter or clicks the button it searches for animals. We can do this by listening for submit events on the form. Let's go do that now. In SearchParams.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// inside render</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pets<span class=\"token punctuation\">,</span> setPets<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// below state declarations</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">requestPets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> animals <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> pet<span class=\"token punctuation\">.</span><span class=\"token function\">animals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    location<span class=\"token punctuation\">,</span>\n    breed<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> animal\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setPets</span><span class=\"token punctuation\">(</span>animals <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// replace &lt;form></span>\n<span class=\"token operator\">&lt;</span>form\n  onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">requestPets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span></code></pre></div>\n<p>We don't want Parcel to use Babel to translate our async/await calls (since you and I are probably both using modern browsers, you'd want to let it translate it for production.) As such, add this to your package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"last 2 Chrome versions\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will target all <a href=\"https://www.techopedia.com/definition/31094/evergreen-browser\">evergreen browsers</a>. If you're feeling lazy, feel free to just put the one in you're using.</p>\n<p>Now you should be able to see the network request go out whenever you submit the form. Let's display it now. Make a new file called Results.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Pet <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Pet\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Results</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pets <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"search\"</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>pets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>No Pets Found<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        pets<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pet</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>Pet\n              animal<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span>\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n              name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n              breed<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>breeds<span class=\"token punctuation\">.</span>primary<span class=\"token punctuation\">}</span>\n              media<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>photos<span class=\"token punctuation\">}</span>\n              location<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pet<span class=\"token punctuation\">.</span>contact<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n                pet<span class=\"token punctuation\">.</span>contact<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>state\n              <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n              id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pet<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Results<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">key</code> is there so that React knows when you re-arrange lists or filter them differently. It uses that key to shallowly compare if the item has changed or re-arragned to improve DOM performance. Use a unique identifier for it. Only use index if you have to.</li>\n</ul>\n<p>Now go back to SearchParams.js and put this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// at top</span>\n<span class=\"token keyword\">import</span> Results <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Results\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// under &lt;/form>, still inside the div</span>\n<span class=\"token operator\">&lt;</span>Results pets<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>pets<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you should be able to make request and see those propagated to the DOM! Pretty great!</p>\n<p>Let's go make Pet.js look decent:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Pet</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> animal<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">,</span> media<span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> hero <span class=\"token operator\">=</span> <span class=\"token string\">\"http://placecorgi.com/300/300\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>media<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hero <span class=\"token operator\">=</span> media<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>small<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/details/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token string\">\"pet\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"image-container\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hero<span class=\"token punctuation\">}</span> alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"info\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> — </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> — </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Pet<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Looks much better! The links don't go anywhere yet but we'll get there. We don't have a good loading experience yet though. Right now we just seem unresponsive. Using a new tool to React called Suspense we can make the DOM rendering wait until we finish loading our data, show a loader, and then once it finishes we can resume rendering it. This is coming soon; for now you would just keep track of a loading Boolean and then conditionally show your component or a loading spinner based on whether it was finished loading or not.</p>\n<p> </p>\n<h2 id=\"-26ed2f5141bc11a9ef298e8319687929cfbd413b\" style=\"position:relative;\"><a href=\"#-26ed2f5141bc11a9ef298e8319687929cfbd413b\" aria-label=\" 26ed2f5141bc11a9ef298e8319687929cfbd413b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 <a href=\"https://github.com/btholt/complete-intro-to-react-v5/commit/26ed2f5141bc11a9ef298e8319687929cfbd413b\">26ed2f5141bc11a9ef298e8319687929cfbd413b</a></h2>\n<p> </p>","frontmatter":{"path":"/async","title":"Handling Async","order":9}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":3,"path":"/eslint-prettier","title":"npm, ESLint & Prettier"}}},{"node":{"frontmatter":{"order":4,"path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":5,"path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":6,"path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":7,"path":"/effects","title":"Effects"}}},{"node":{"frontmatter":{"order":8,"path":"/dev-tools","title":"Dev Tools"}}},{"node":{"frontmatter":{"order":9,"path":"/async","title":"Handling Async"}}},{"node":{"frontmatter":{"order":10,"path":"/reach-router","title":"Reach Router"}}},{"node":{"frontmatter":{"order":11,"path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":12,"path":"/error-boundaries","title":"Error Boundaries"}}},{"node":{"frontmatter":{"order":13,"path":"/context","title":"Context"}}},{"node":{"frontmatter":{"order":14,"path":"/portals-and-refs","title":"Portals and Refs"}}},{"node":{"frontmatter":{"order":15,"path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":16,"path":"/hooks-in-depth","title":"Hooks in Depth"}}},{"node":{"frontmatter":{"order":17,"path":"/emotion","title":"Emotion"}}},{"node":{"frontmatter":{"order":19,"path":"/code-splitting","title":"Code Splitting"}}},{"node":{"frontmatter":{"order":19,"path":"/typescript","title":"TypeScript"}}},{"node":{"frontmatter":{"order":20,"path":"/ssr","title":"Server Side Rendering"}}},{"node":{"frontmatter":{"order":21,"path":"/redux","title":"Redux"}}},{"node":{"frontmatter":{"order":22,"path":"/testing","title":"Testing"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["831804104"]}