{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/testing",
    "result": {"data":{"markdownRemark":{"html":"<p><strong>To get reset to the latest code:</strong></p>\n<ul>\n<li><code class=\"language-text\">git clone git@github.com:btholt/complete-intro-to-react-v5.git</code></li>\n<li><code class=\"language-text\">git checkout master -f</code></li>\n<li>Make sure you have <a href=\"https://nodejs.org\">Node.js installed</a>.</li>\n<li><code class=\"language-text\">npm install</code></li>\n<li><code class=\"language-text\">npm run dev</code> to start the server on <a href=\"http://localhost:1234/\">http://localhost:1234/</a></li>\n</ul>\n<p>This is meant to be a very brief treatise on how to do testing on React applications. Frontend Masters already has a <a href=\"https://frontendmasters.com/courses/testing-react/\">thorough course on how to test React applications</a> here from Kent C. Dodds. This will be a brief intro on how to set up Jest tests for the application we just created.</p>\n<h2 id=\"testing-with-jest\" style=\"position:relative;\"><a href=\"#testing-with-jest\" aria-label=\"testing with jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing with Jest</h2>\n<p>First we'll start with <a href=\"https://jestjs.io\">Jest</a>. Jest is the testing framework that Facebook puts out. It is not at all tied to React despite both being maintained by Facebook. It's useful for other frameworks and I use it frequently with Node.js applications.</p>\n<p>It's useful to know that Jest is built on top of <a href=\"https://jasmine.github.io/\">Jasmine</a>. Jasmine does the underlying testing part while Jest is the highlevel runner of the tests. Sometimes it's useful to consult the Jasmine docs too.</p>\n<p>Ever since, <a href=\"https://github.com/testing-library/dom-testing-library/issues/260\">this issue</a>, <code class=\"language-text\">react-testing-library</code> was renamed to <code class=\"language-text\">@testing-library/react</code>. Due to this a fresh install of <code class=\"language-text\">react-testing-library</code> will cause the following error to occur:</p>\n<p><code class=\"language-text\">react-testing-library has moved to @testing-library/react. Please uninstall react-testing-library and install @testing-library/react instead, or use an older version of react-testing-library. Learn more about this change here: https://github.com/testing-library/dom-testing-library/issues/260 Thanks! :)</code></p>\n<p>So, considering the issue above, let's start testing our application. Run <code class=\"language-text\">npm install -D jest @testing-library/react</code>.</p>\n<p><code class=\"language-text\">react-testing-library</code> is made by another Frontend Masters teacher, <a href=\"https://frontendmasters.com/courses/testing-react/\">Kent C. Dodds</a>. This tool has a bunch of convenience features that make testing React significantly easier and is now the recommended way of testing React, supplanting <a href=\"http://airbnb.io/enzyme/\">Enzyme</a>. Previous versions of this course teach Enzyme if you'd like to see that.</p>\n<p>Next go into your src directory and create a folder called <code class=\"language-text\">__tests__</code>. Notice that's double underscores on both sides. Why double? They borrowed it from Python where double underscores (\"dunders\" as I've heard them called) mean something magic happens. In this case, Jest assumes all JS files in here are tests.</p>\n<p>We're going to write tests for SearchParams. But remember that SearchParams use <code class=\"language-text\">@frontendmasters/pet</code> to make API requests, something we can't do in Node.js. Luckily we can make a mock of it. In the root directly of the project, create a folder called <code class=\"language-text\">__mocks__</code>. If a put a file in here called <code class=\"language-text\">lodash.js</code>, that file will be imported anywhere I have <code class=\"language-text\">import _ from \"lodash\"</code>. It's so we can mock modules (like <code class=\"language-text\">@frontendmasters/pet</code>) that wouldn't make sense to run in Node or for your tests. So create the folder, create a folder inside that called <code class=\"language-text\">@frontendmasters</code> (to signify the scoped package's organization) and then put <code class=\"language-text\">pet.js</code> inside of that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> readFileSync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> act <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> breeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bichon Frise\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bolognese\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bolonka\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Coton de Tulear\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Havanese\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Lowchen\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Maltese\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doggos <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/res.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ANIMALS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> _breeds <span class=\"token operator\">=</span> breeds<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> _dogs <span class=\"token operator\">=</span> doggos<span class=\"token punctuation\">.</span>animals<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mock <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">breeds</span><span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">then</span><span class=\"token operator\">:</span> <span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            breeds\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">animals</span><span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">then</span><span class=\"token operator\">:</span> <span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>doggos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> mock<span class=\"token punctuation\">;</span></code></pre></div>\n<p>After that, <a href=\"https://raw.githubusercontent.com/btholt/complete-intro-to-react-v5/testing/__mocks__/@frontendmasters/res.json\">go copy and paste this fixture</a> into your same directory as the mock <code class=\"language-text\">pet.js</code> and call it <code class=\"language-text\">res.json</code>.</p>\n<ul>\n<li>I just literally looked at one of the responses from Petfinder and took out the identifiying information.</li>\n<li>Here we're having to do a few odd things. The first you'll notice we're mimicking the API of the <code class=\"language-text\">pet</code> client. We're exporting an <code class=\"language-text\">ANIMALS</code> variable and a default object which has <code class=\"language-text\">breeds</code> and <code class=\"language-text\">animals</code> methods.</li>\n<li>These are in turn returning fake promises. We're doing this so we can wrap these actions in <code class=\"language-text\">act</code> calls from <code class=\"language-text\">react-testing-library</code> (that method actually originates from <code class=\"language-text\">react-test-renderer</code>, the underlying <code class=\"language-text\">react-dom</code>-like library made for testing.) <code class=\"language-text\">act</code> allows React to correctly batch updates to better simulate the browser. If you don't do this, the behavior can be non-deterministic (which means if you run it twice you make get two different results) and cause flaky tests. It has the added benefit of being synchronous and faster.</li>\n<li>We're also exporting the breeds and dogs objects which are the underlying data structures. This is because we want to compare that if we return five breeds from the API, that we have five options inside the dropdown.</li>\n<li>We're using <code class=\"language-text\">jest.fn</code> so we can spy on these functions later to make sure that the app is calling the API on startup.</li>\n</ul>\n<p>Now make a file called SearchParams.test.js. In there put:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> cleanup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> pet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> _breeds<span class=\"token punctuation\">,</span> _dogs<span class=\"token punctuation\">,</span> <span class=\"token constant\">ANIMALS</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@frontendmasters/pet\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> SearchParams <span class=\"token keyword\">from</span> <span class=\"token string\">\"../SearchParams\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SearchParams\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByTestId <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>SearchParams <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> animalDropdown <span class=\"token operator\">=</span> <span class=\"token function\">getByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use-dropdown-animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>animalDropdown<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ANIMALS</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now in <code class=\"language-text\">useDropdown.js</code> put this so we can grab the correct select:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token operator\">&lt;</span>select\n  data<span class=\"token operator\">-</span>testid<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">[</span>…<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>Using test-ids is a good idea because you're divorcing test logic from typical app logic, hence why we don't use a normal ID. If your structure changes, you just move the testid to be somewhere else and it continues working.</li>\n<li><code class=\"language-text\">react-testing-library</code> has its own cleanup to do so we pass that function to Jest to let it do it.</li>\n<li>Next we use render to render out all the SearchParams in a testing vacuum to JS representation of the JS markup. From there we check that it populates the animal dropdown with the correct number of animals (the +1 is there because there's an empty option too.)</li>\n</ul>\n<p>Run this test via <code class=\"language-text\">npx jest</code>. If you seeit work, then place <code class=\"language-text\">\"test\": \"jest\"</code> in your package.json's scripts.</p>\n<p><code class=\"language-text\">test</code> and <code class=\"language-text\">expect</code> come from Jasmine via Jest and are injected in the global scope. To fix your lint errors, add this your <code class=\"language-text\">env</code> in your .eslintrc.json: <code class=\"language-text\">\"jest\": true</code>.</p>\n<p>Let's add another test.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// beneat the last expect</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">.</span>breeds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> breedDropdown <span class=\"token operator\">=</span> <span class=\"token function\">getByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use-dropdown-breed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>breedDropdown<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>_breeds<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>We're using <code class=\"language-text\">toHaveBeenCalled</code> to check on the spied methods to make sure the app is calling the API correctly. You can get really granular with what params but we'll skip that for now.</li>\n<li>Because we made the \"promises\" synchronous, we don't have to do any waiting for the first breed list. <code class=\"language-text\">react-testing-library</code> has tools that let you wait for DOM changes.</li>\n</ul>\n<p>Let's get a bit more complicated. Add this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// pull out more things from render</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> container<span class=\"token punctuation\">,</span> getByTestId<span class=\"token punctuation\">,</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>SearchParams <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// beneath the last test</span>\n<span class=\"token keyword\">const</span> searchResults <span class=\"token operator\">=</span> <span class=\"token function\">getByTestId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"search-results\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>searchResults<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No Pets Found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fireEvent</span><span class=\"token punctuation\">(</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Submit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>pet<span class=\"token punctuation\">.</span>animals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>searchResults<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span>_dogs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We have a bit of a problem though. Jest expects to be to run this tests synchronously and we're doing async await. We can't force JS into doing this sync. If wanted to this this way, we either have to monkey patch promises in the testing environment (gross, but this is how Facebook does it) or we can refactor to not use async await. This is simpler for our learning purporses, so let's do that. In SearchParams.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// refactor requestPets</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">requestPets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pet\n    <span class=\"token punctuation\">.</span><span class=\"token function\">animals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      location<span class=\"token punctuation\">,</span>\n      breed<span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> animal\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> animals <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setPets</span><span class=\"token punctuation\">(</span>animals <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we're simulating a submit event to search for pets and then checking it properly called the API and then renders the correct animal list length. Let's go add the testid we need in Results.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// outtermost div</span>\n<span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"search\"</span> data<span class=\"token operator\">-</span>testid<span class=\"token operator\">=</span><span class=\"token string\">\"search-results\"</span><span class=\"token operator\">></span></code></pre></div>\n<p>Now we're actually testing some user interaction. The key here is try not to test the implementation details. We could refactor the component to <em>do</em> the same the thing but internally work totally differently. Should our unit tests break? No! It should work in any case. You should test as if your components were a blackbox, as if you were simply a user of your app with zero knowledge of how it was written.</p>\n<p>One last test, the famous snapshot test:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// last test</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchInlineSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we're doing a Jest test in which we're doing a snapshot test. As soon as you run this test the first time, it'll run and capture the output in a snapshot template string (you'll see it after you run it successfully the first time.) Every time afterwards when you run it it will compare the output with this snapshot. If it changes, it'll fail the test. If you mean to change it, you just run <code class=\"language-text\">jest -u</code> and it will update the snapshots. Cool, right? You can also have it write to an external file instead of inline in the code with <code class=\"language-text\">toMatchSnapshot</code>. I like that everything is in one file. It's up to you.</p>\n<p>Add that your package.json: <code class=\"language-text\">\"test:update\": \"jest -u\",</code></p>\n<p>Now your snapshot test should pass. Check out that it created a <code class=\"language-text\">__snapshots__</code> directory with your snapshot in it (if you did it <code class=\"language-text\">toMatchSnapshot</code>). You should commit this file as everyone should get the same output as you.</p>\n<p>Let's talk about code coverage. Luckily has it built into jest because it can be a bit of a pain to set up. It's a tool called <a href=\"https://istanbul.js.org\">istanbul</a>. Istanbul generates a report of how much of you code is covered by tests. It's a useful metric to track you're generally adding tests when you add new features but by no means does a 100% test-covered project means that those tests are good. It's easy to write garbage tests, and garbage tests hurt more than help.</p>\n<p>In any case, run <code class=\"language-text\">npx jest --coverage</code> to try it out. It'll show you an outline of the results in the CLI and then generate a report in a new <code class=\"language-text\">coverage</code> directory (don't check this in to git.) Open coverage/lcov-report/index.html to see a nice web page outlining your test coverage. Add this to your package.json:\n<code class=\"language-text\">\"test:coverage\": \"jest --coverage\",</code>.</p>\n<p>One more useful thing about Jest: watch mode. You can run your tests interactively and on file-save. It'll only re-run tests that could have possibly been changed and previously failed so it's a fast feedback cycle to fix tests. Add this as well to your package.json: <code class=\"language-text\">\"test:watch\": \"jest --watch\",</code>.</p>\n<h2 id=\"-branch-testing\" style=\"position:relative;\"><a href=\"#-branch-testing\" aria-label=\" branch testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 branch <a href=\"https://github.com/btholt/complete-intro-to-react-v5/tree/testing\">testing</a></h2>","frontmatter":{"path":"/testing","title":"Testing","order":22}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":3,"path":"/eslint-prettier","title":"npm, ESLint & Prettier"}}},{"node":{"frontmatter":{"order":4,"path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":5,"path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":6,"path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":7,"path":"/effects","title":"Effects"}}},{"node":{"frontmatter":{"order":8,"path":"/dev-tools","title":"Dev Tools"}}},{"node":{"frontmatter":{"order":9,"path":"/async","title":"Handling Async"}}},{"node":{"frontmatter":{"order":10,"path":"/reach-router","title":"Reach Router"}}},{"node":{"frontmatter":{"order":11,"path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":12,"path":"/error-boundaries","title":"Error Boundaries"}}},{"node":{"frontmatter":{"order":13,"path":"/context","title":"Context"}}},{"node":{"frontmatter":{"order":14,"path":"/portals-and-refs","title":"Portals and Refs"}}},{"node":{"frontmatter":{"order":15,"path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":16,"path":"/hooks-in-depth","title":"Hooks in Depth"}}},{"node":{"frontmatter":{"order":17,"path":"/emotion","title":"Emotion"}}},{"node":{"frontmatter":{"order":19,"path":"/code-splitting","title":"Code Splitting"}}},{"node":{"frontmatter":{"order":19,"path":"/typescript","title":"TypeScript"}}},{"node":{"frontmatter":{"order":20,"path":"/ssr","title":"Server Side Rendering"}}},{"node":{"frontmatter":{"order":21,"path":"/redux","title":"Redux"}}},{"node":{"frontmatter":{"order":22,"path":"/testing","title":"Testing"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["831804104"]}