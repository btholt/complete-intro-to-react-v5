{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/typescript",
    "result": {"data":{"markdownRemark":{"html":"<p>TypeScript is a thin layer on top of JavaScript that adds the power of a static checker to your code base. This means you'll have another layer of protection helping protect you against dumb bugs like <code class=\"language-text\">var x = 5; x.toUpperCase()</code>: things that a normal linter can't find but a type system can.</p>\n<p>This is going to be a brief intro: how to set it up and get going with it. If you want more TypeScript goodness, check out <a href=\"https://frontendmasters.com/courses/typescript/\">Mike North's course</a>.</p>\n<p>First thing, <code class=\"language-text\">npm install -D typescript</code>. Then run <code class=\"language-text\">npx tsc --init</code>. <code class=\"language-text\">npx</code> will run the TypeScript tool directly from your node_modules and init your project for you. You'll see now a tsconfig.json. We don't need to set up anything else since Parcel already knows how to handle TypeScript files. Open your new <code class=\"language-text\">tsconfig.json</code> file and uncomment the <code class=\"language-text\">jsx</code> field. Replace <code class=\"language-text\">preserve</code> with <code class=\"language-text\">react</code>. This lets TypeScript that you're writing React. Then update the target to be <code class=\"language-text\">ES2018</code> so that you can use async / await and promises.</p>\n<p>Next we need to install the types for our project. Not all projects are written in TypeScript so another project, DefinitelyTyped, provides third party types for your library. In order to install these types, run <code class=\"language-text\">npm install -D @types/react @types/react-dom @types/reach__router</code>. This will grab all these type definitions.</p>\n<p>This is a migration: we're going to migrate one file at a time to being a TypeScript file. As we migrate each file, we'll change it from being a <code class=\"language-text\">.js</code> file to a <code class=\"language-text\">.tsx</code> file. Let's start with Modal.tsx (make sure you rename it to <code class=\"language-text\">.tsx</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> ReactChild <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createPortal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> modalRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"modal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Modal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> children<span class=\"token operator\">:</span> ReactChild<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> elRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>modalRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      modalRoot<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> elRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Modal<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Fairly similar. We had to make it so the ref could never potentially be null by instantiating it inside the ref. Yes, this will create a new DOM node every time you render, and no that's probably not a big deal. You can do it like we had been doing by using the type <code class=\"language-text\">HTMLDivElement | null</code> but then you have to null check <em>anywhere</em> you use <code class=\"language-text\">elRef.current</code> which is burdensome. This is fine for now; we can refactor if it ends up being a problem.</p>\n<p>Then we have to do a null check on modalRoot inside the effect because that could be null too. TypeScript will force you to do this a lot, but it will save you run time errors. Notice we didn't write many types down (just children and the ref type): TypeScript is smart enough to figure out types on its own most of the time.</p>\n<p>Notice we're importing the <code class=\"language-text\">ReactChild</code> type from React. Types can be exported from libraries and modules. And then we're asserting it's an array of ReactChildren by throwing the <code class=\"language-text\">[]</code> on the end.</p>\n<p>We're also using a generic here. Refs can be one of many things. In this case</p>\n<p>Let's take the time now to migrate from ESLint to TSLint. TypeScript has its own linter that it uses and it's helpful to have those additional rules.</p>\n<ol>\n<li>Run <code class=\"language-text\">npm uninstall eslint babel-eslint eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks</code></li>\n<li>Run <code class=\"language-text\">npm install -D tslint tslint-react tslint-config-prettier</code></li>\n<li>Delete .eslintrc.json</li>\n<li>Change your package.json lint entry to <code class=\"language-text\">\"lint\": \"tslint --project .\",</code></li>\n<li>Add the following to a new file, tslint.json</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tslint:recommended\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tslint-react\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tslint-config-prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ordered-imports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"object-literal-sort-keys\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"member-ordering\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"jsx-no-lambda\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you're linting as well as type checking! I disabled some really annoying rules for you. You're welcome.</p>\n<p>Let's quickly do ThemeContext.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// replace</span>\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> createContext<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>theme<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Here we just have to tell TS that we have a strict ordering of string and function. This will make other files easier to type.</li>\n<li>We're telling it that this function will accept a string which TypeScript will enforce for us later.</li>\n</ul>\n<p>Let's go fix another file. Details.tsx.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// imports</span>\n<span class=\"token keyword\">import</span> pet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Photo<span class=\"token punctuation\">,</span> AnimalResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@frontendmasters/pet\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> navigate<span class=\"token punctuation\">,</span> RouteComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reach/router\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Details</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span>RouteComponentProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// add public to methods</span>\n\n<span class=\"token comment\">// replace state</span>\n<span class=\"token keyword\">public</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  loading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  showModal<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  animal<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  location<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  media<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Photo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  breed<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// first thing inside componentDidMount</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// replace then inside componentDidMount</span>\n pet\n  <span class=\"token punctuation\">.</span><span class=\"token function\">animal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> animal <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AnimalResponse<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// replace catch</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// error boundary</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DetailsErrorBoundary</span><span class=\"token punctuation\">(</span>\n  props<span class=\"token operator\">:</span> RouteComponentProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>We need to tell TypeScript what props each component expects. Now when you import that component elsewhere, TS will make sure the consumer passes all the right props in.</li>\n<li>We need to use Reach Router's Router params because the ID param will come from the router, not directly from the consumer.</li>\n<li>We need to assert that we have those process.env keys, so we will throw whenever we don't. Same thing with the ID from the route props. If Details somehow gets rendered without it, we need to navigate to home (better to a 404 page but we don't have one.)</li>\n<li>We have to give all state a default setting. This prevents errors on the initial render and it gives TypeScript the ability to infer all your types.</li>\n<li>It can't tell what type media is so we tell it's an array of Photos from the pet library.</li>\n<li>We had to put a null check in the componentDidMount. If the animal comes back empty, we have to handle that case. Here we're just navigating back to home and returning (the return is necessary or TS still won't be happy.)</li>\n<li>TS still won't be happy because our other pages haven't been typed yet. We're getting there.</li>\n</ul>\n<p>Let's go do ErrorBoundary.tsx now</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// delete constructor, replace with this:</span>\n<span class=\"token keyword\">public</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  redirect<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add public to all methods</span>\n\n<span class=\"token comment\">// add types to componentDidCatch parameters</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">,</span> info<span class=\"token operator\">:</span> ErrorInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>We didn't have to change from a constructor to a public class property but it makes typing so much easier because TS knows how to handle it implicitly if you use public class properties.</li>\n<li>We had to type the parameters. We have TS in strict mode which means it doesn't like anything to be an <code class=\"language-text\">any</code> type.</li>\n</ul>\n<p>Now that that is done, let's go do Carousel.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// import</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Photo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@frontendmasters/pet\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// above Carousel</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">{</span>\n  media<span class=\"token operator\">:</span> Photo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span> <span class=\"token punctuation\">{</span>\n  active<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  photos<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// add types to class</span>\n<span class=\"token class-name\"><span class=\"token keyword\">class</span></span> Carousel <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>Component<span class=\"token operator\">&lt;</span>IProps<span class=\"token punctuation\">,</span> IState<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// add public to all methods / props</span>\n\n<span class=\"token comment\">// add types to state</span>\n<span class=\"token keyword\">public</span> state<span class=\"token operator\">:</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  photos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  active<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// modify getDerivedStateFromProps</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    media\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> IProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> photos<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// modify handleIndexClick</span>\n<span class=\"token keyword\">public</span> <span class=\"token function-variable function\">handleIndexClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">HTMLElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      active<span class=\"token operator\">:</span> <span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>index\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>React.Component is a generic, in that it can accept other types. Here we're telling it what its state and props will look like. We start the interfaces off with a capital I because this signifies that this is an interface. This is a common pattern and one TSLint enforces.</li>\n<li>We could do this without specifying IState like we did. I'm doing to show you how you can also pass in IState and IProps because it sometimes it's a useful pattern.</li>\n<li>We need to type the event type coming back from the DOM. We know it'll come from an HTML element, and we have to make sure it's not a generic window event. TypeScript forces a lot of this defensive programming.</li>\n</ul>\n<p>Carousel is done. Let's do Pet.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// import</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> FunctionComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Photo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@frontendmasters/pet\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  animal<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  breed<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  media<span class=\"token operator\">:</span> Photo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  location<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  id<span class=\"token operator\">:</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Pet<span class=\"token operator\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>IProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> props <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li>Here we're telling TS that Pet is a Function Component for React and that it fits all the shapes of a React component.</li>\n</ul>\n<p>Now let's go do useDropdown.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContext<span class=\"token punctuation\">,</span> SetStateAction<span class=\"token punctuation\">,</span> Dispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ThemeContext <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createContext</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Dispatch<span class=\"token operator\">&lt;</span>SetStateAction<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">>></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>theme<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> theme\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ThemeContext<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>We have to be very specifc that we're expecting a useState-like response, hence all the specificity here. We all need to ensure the return function looks and acts just like useState's updater does. It's a lot of ceremony to give ourselves guarantees.</li>\n</ul>\n<p>Let's go do SearchParams.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// update React import, add Reach Router import</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  useState<span class=\"token punctuation\">,</span>\n  useEffect<span class=\"token punctuation\">,</span>\n  useContext<span class=\"token punctuation\">,</span>\n  FunctionComponent\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RouteComponentProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@reach/router\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> pet<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">ANIMALS</span><span class=\"token punctuation\">,</span> Animal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@frontendmasters/pet\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// replace function declaration</span>\n<span class=\"token keyword\">const</span> SearchParams<span class=\"token operator\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>RouteComponentProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  …\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// replace useState calls</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pets<span class=\"token punctuation\">,</span> setPets<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>breeds<span class=\"token punctuation\">,</span> updateBreeds<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Always need to be defensive about undefined errors. This is one of the benefits of TypeScript, even if it's a bit annoying.</li>\n<li>Occasionally you need to give TypeScript a hint to what it's going to get. That's what <code class=\"language-text\">as</code> for: you're saying I'm sure it's going to be this.</li>\n<li>We have to let React know what sort of parameters this component expects. And in this case it's a Reach Router route so it expects a path so we need let TypeScript in on the secret.</li>\n</ul>\n<p>Now let's go do Results.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// import</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> FunctionComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Animal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@frontendmasters/pet\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// above class</span>\n<span class=\"token class-name\"><span class=\"token keyword\">interface</span></span> IProps <span class=\"token punctuation\">{</span>\n  pets<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// replace function declaration</span>\n<span class=\"token keyword\">const</span> Results<span class=\"token operator\">:</span> FunctionComponent<span class=\"token operator\">&lt;</span>IProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pets <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> … <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>This how you type FunctionComponents. Not too bad.</li>\n</ul>\n<p>Lastly, let's do App.tsx.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Nothing!</span></code></pre></div>\n<p>Because of the rest of the work we did, App needs no changes! Hooray! 🎉</p>\n<p>Last thing: open <code class=\"language-text\">index.html</code> and change the link from <code class=\"language-text\">App.js</code> to <code class=\"language-text\">App.tsx</code> and then you should be good to go!</p>\n<p>This probably felt burdensome to do. In fact, it is. I had a difficult time writing this! Converting existing JS codebasees to TypeScript necessitates a certain amount of writing and rewriting to get all the type signatures in a place that the compiler can verify everything. Be cautious before you call for your team to rewrite.</p>\n<p>However, now that we're playing TypeScript land, this code would be joyous to work on. Visual Studio Code will autocomplete for you. TypeScript will <em>instantly</em> let you know when you've made a mistake. You can launch new code with higher certainty that you haven't created run time errors. This all comes at the cost of taking longer to write. Ask yourself if that's a trade-off you're willing to make: if you're a tiny startup that may not happen. If you're as large as Microsoft, maybe! It's a trade-off like all things are. It is a question you should answer before you start a new code base: should we type check?</p>\n<p>Last thing, let's add a type check to our package.json just in case someone isn't using a type checking editor. Add <code class=\"language-text\">\"typecheck\": \"tsc --noEmit\"</code> to your package.json. This is also useful CI scenarios.</p>\n<p>Congrats! You finished TypeScript.</p>\n<h2 id=\"-branch-typescript\" style=\"position:relative;\"><a href=\"#-branch-typescript\" aria-label=\" branch typescript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 branch <a href=\"https://github.com/btholt/complete-intro-to-react-v5/tree/typescript\">typescript</a></h2>","frontmatter":{"path":"/typescript","title":"TypeScript","order":19}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":1,"path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":2,"path":"/pure-react","title":"Pure React"}}},{"node":{"frontmatter":{"order":3,"path":"/eslint-prettier","title":"npm, ESLint & Prettier"}}},{"node":{"frontmatter":{"order":4,"path":"/parcel","title":"Parcel"}}},{"node":{"frontmatter":{"order":5,"path":"/jsx","title":"JSX"}}},{"node":{"frontmatter":{"order":6,"path":"/hooks","title":"Hooks"}}},{"node":{"frontmatter":{"order":7,"path":"/effects","title":"Effects"}}},{"node":{"frontmatter":{"order":8,"path":"/dev-tools","title":"Dev Tools"}}},{"node":{"frontmatter":{"order":9,"path":"/async","title":"Handling Async"}}},{"node":{"frontmatter":{"order":10,"path":"/reach-router","title":"Reach Router"}}},{"node":{"frontmatter":{"order":11,"path":"/class-components","title":"Class Components"}}},{"node":{"frontmatter":{"order":12,"path":"/error-boundaries","title":"Error Boundaries"}}},{"node":{"frontmatter":{"order":13,"path":"/context","title":"Context"}}},{"node":{"frontmatter":{"order":14,"path":"/portals-and-refs","title":"Portals and Refs"}}},{"node":{"frontmatter":{"order":15,"path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":16,"path":"/hooks-in-depth","title":"Hooks in Depth"}}},{"node":{"frontmatter":{"order":17,"path":"/emotion","title":"Emotion"}}},{"node":{"frontmatter":{"order":19,"path":"/code-splitting","title":"Code Splitting"}}},{"node":{"frontmatter":{"order":19,"path":"/typescript","title":"TypeScript"}}},{"node":{"frontmatter":{"order":20,"path":"/ssr","title":"Server Side Rendering"}}},{"node":{"frontmatter":{"order":21,"path":"/redux","title":"Redux"}}},{"node":{"frontmatter":{"order":22,"path":"/testing","title":"Testing"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["831804104"]}